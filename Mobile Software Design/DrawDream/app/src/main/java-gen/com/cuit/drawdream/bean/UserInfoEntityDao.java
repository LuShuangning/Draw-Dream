package com.cuit.drawdream.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cuit.drawdream.bean.UserInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO_ENTITY.
*/
public class UserInfoEntityDao extends AbstractDao<UserInfoEntity, Long> {

    public static final String TABLENAME = "USER_INFO_ENTITY";

    /**
     * Properties of entity UserInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property User_gander = new Property(3, String.class, "user_gander", false, "USER_GANDER");
        public final static Property User_phone = new Property(4, String.class, "user_phone", false, "USER_PHONE");
        public final static Property User_email = new Property(5, String.class, "user_email", false, "USER_EMAIL");
        public final static Property User_sign = new Property(6, String.class, "user_sign", false, "USER_SIGN");
    };


    public UserInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "'USER_NAME' TEXT NOT NULL ," + // 1: user_name
                "'USER_ID' TEXT NOT NULL ," + // 2: user_id
                "'USER_GANDER' TEXT NOT NULL ," + // 3: user_gander
                "'USER_PHONE' TEXT NOT NULL ," + // 4: user_phone
                "'USER_EMAIL' TEXT NOT NULL ," + // 5: user_email
                "'USER_SIGN' TEXT);"); // 6: user_sign
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfoEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUser_name());
        stmt.bindString(3, entity.getUser_id());
        stmt.bindString(4, entity.getUser_gander());
        stmt.bindString(5, entity.getUser_phone());
        stmt.bindString(6, entity.getUser_email());
 
        String user_sign = entity.getUser_sign();
        if (user_sign != null) {
            stmt.bindString(7, user_sign);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfoEntity readEntity(Cursor cursor, int offset) {
        UserInfoEntity entity = new UserInfoEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // user_name
            cursor.getString(offset + 2), // user_id
            cursor.getString(offset + 3), // user_gander
            cursor.getString(offset + 4), // user_phone
            cursor.getString(offset + 5), // user_email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // user_sign
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfoEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUser_name(cursor.getString(offset + 1));
        entity.setUser_id(cursor.getString(offset + 2));
        entity.setUser_gander(cursor.getString(offset + 3));
        entity.setUser_phone(cursor.getString(offset + 4));
        entity.setUser_email(cursor.getString(offset + 5));
        entity.setUser_sign(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
