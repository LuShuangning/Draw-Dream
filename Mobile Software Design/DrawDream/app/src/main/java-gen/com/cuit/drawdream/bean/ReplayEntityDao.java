package com.cuit.drawdream.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cuit.drawdream.bean.ReplayEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REPLAY_ENTITY.
*/
public class ReplayEntityDao extends AbstractDao<ReplayEntity, Void> {

    public static final String TABLENAME = "REPLAY_ENTITY";

    /**
     * Properties of entity ReplayEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Core_nede_id = new Property(0, String.class, "core_nede_id", false, "CORE_NEDE_ID");
        public final static Property Core_acco_id = new Property(1, String.class, "core_acco_id", false, "CORE_ACCO_ID");
        public final static Property Core_content = new Property(2, String.class, "core_content", false, "CORE_CONTENT");
        public final static Property Core_date = new Property(3, String.class, "core_date", false, "CORE_DATE");
    };


    public ReplayEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ReplayEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REPLAY_ENTITY' (" + //
                "'CORE_NEDE_ID' TEXT NOT NULL ," + // 0: core_nede_id
                "'CORE_ACCO_ID' TEXT," + // 1: core_acco_id
                "'CORE_CONTENT' TEXT," + // 2: core_content
                "'CORE_DATE' TEXT);"); // 3: core_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REPLAY_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReplayEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCore_nede_id());
 
        String core_acco_id = entity.getCore_acco_id();
        if (core_acco_id != null) {
            stmt.bindString(2, core_acco_id);
        }
 
        String core_content = entity.getCore_content();
        if (core_content != null) {
            stmt.bindString(3, core_content);
        }
 
        String core_date = entity.getCore_date();
        if (core_date != null) {
            stmt.bindString(4, core_date);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ReplayEntity readEntity(Cursor cursor, int offset) {
        ReplayEntity entity = new ReplayEntity( //
            cursor.getString(offset + 0), // core_nede_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // core_acco_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // core_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // core_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReplayEntity entity, int offset) {
        entity.setCore_nede_id(cursor.getString(offset + 0));
        entity.setCore_acco_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCore_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCore_date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ReplayEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ReplayEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
