package com.cuit.drawdream.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cuit.drawdream.bean.AppInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APP_INFO_ENTITY.
*/
public class AppInfoEntityDao extends AbstractDao<AppInfoEntity, Long> {

    public static final String TABLENAME = "APP_INFO_ENTITY";

    /**
     * Properties of entity AppInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property App_id = new Property(1, String.class, "app_id", false, "APP_ID");
        public final static Property Version = new Property(2, String.class, "version", false, "VERSION");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Page_url = new Property(4, String.class, "page_url", false, "PAGE_URL");
        public final static Property Ui_type = new Property(5, String.class, "ui_type", false, "UI_TYPE");
        public final static Property Logo = new Property(6, String.class, "logo", false, "LOGO");
    };


    public AppInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_INFO_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'APP_ID' TEXT NOT NULL ," + // 1: app_id
                "'VERSION' TEXT NOT NULL ," + // 2: version
                "'TYPE' TEXT NOT NULL ," + // 3: type
                "'PAGE_URL' TEXT," + // 4: page_url
                "'UI_TYPE' TEXT NOT NULL ," + // 5: ui_type
                "'LOGO' TEXT);"); // 6: logo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_INFO_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getApp_id());
        stmt.bindString(3, entity.getVersion());
        stmt.bindString(4, entity.getType());
 
        String page_url = entity.getPage_url();
        if (page_url != null) {
            stmt.bindString(5, page_url);
        }
        stmt.bindString(6, entity.getUi_type());
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(7, logo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppInfoEntity readEntity(Cursor cursor, int offset) {
        AppInfoEntity entity = new AppInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // app_id
            cursor.getString(offset + 2), // version
            cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // page_url
            cursor.getString(offset + 5), // ui_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // logo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApp_id(cursor.getString(offset + 1));
        entity.setVersion(cursor.getString(offset + 2));
        entity.setType(cursor.getString(offset + 3));
        entity.setPage_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUi_type(cursor.getString(offset + 5));
        entity.setLogo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
