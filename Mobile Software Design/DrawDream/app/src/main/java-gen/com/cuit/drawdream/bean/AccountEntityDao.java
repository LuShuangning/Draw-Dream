package com.cuit.drawdream.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cuit.drawdream.bean.AccountEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCOUNT_ENTITY.
*/
public class AccountEntityDao extends AbstractDao<AccountEntity, Void> {

    public static final String TABLENAME = "ACCOUNT_ENTITY";

    /**
     * Properties of entity AccountEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Account = new Property(0, String.class, "account", false, "ACCOUNT");
        public final static Property Pwd = new Property(1, String.class, "pwd", false, "PWD");
        public final static Property User_id = new Property(2, long.class, "user_id", false, "USER_ID");
    };


    public AccountEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AccountEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT_ENTITY' (" + //
                "'ACCOUNT' TEXT NOT NULL ," + // 0: account
                "'PWD' TEXT NOT NULL ," + // 1: pwd
                "'USER_ID' INTEGER NOT NULL );"); // 2: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAccount());
        stmt.bindString(2, entity.getPwd());
        stmt.bindLong(3, entity.getUser_id());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AccountEntity readEntity(Cursor cursor, int offset) {
        AccountEntity entity = new AccountEntity( //
            cursor.getString(offset + 0), // account
            cursor.getString(offset + 1), // pwd
            cursor.getLong(offset + 2) // user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountEntity entity, int offset) {
        entity.setAccount(cursor.getString(offset + 0));
        entity.setPwd(cursor.getString(offset + 1));
        entity.setUser_id(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AccountEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AccountEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
